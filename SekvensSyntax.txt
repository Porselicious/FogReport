@startuml

actor Customer
boundary index.jsp
boundary measurementsAngled.jsp
boundary measurementsFlat.jsp
boundary shedpage.jsp
boundary BOMpage.jsp

control FrontController

entity HTMLGenerator
entity SVGGenerator
entity LogicFacade
entity CreateCarport
entity DBFacade

database Database


Customer -> index.jsp : selects 'Med skråt tag' from topmenu
index.jsp -> FrontController : command 'MeasurementAngled'
FrontController -> HTMLGenerator : 
activate HTMLGenerator
HTMLGenerator --> FrontController : 
deactivate HTMLGenerator
FrontController --> measurementsAngled.jsp : return measurementsAngled.jsp
measurementsAngled.jsp -> FrontController : user checks on 'tilføj skur', clicks 'Fortsæt'
FrontController -> SVGGenerator : generating sketch for shed placement
activate SVGGenerator
activate HTMLGenerator
SVGGenerator -->  FrontController :
deactivate HTMLGenerator
deactivate SVGGenerator
FrontController --> shedpage.jsp : return shedpage.jsp
shedpage.jsp -> FrontController : user clicks 'Fortsæt', command 'AddShed'
FrontController -> LogicFacade : createOrder()
LogicFacade -> CreateCarport : createOrder()
activate CreateCarport
CreateCarport -> DBFacade : getMaterials()
DBFacade -> Database : getMaterials()
Database --> DBFacade : return materials
DBFacade --> CreateCarport : return materials
CreateCarport --> LogicFacade : calculate Order
deactivate CreateCarport
LogicFacade --> FrontController : return Order
FrontController -> SVGGenerator : carport sketch is created from Order
activate HTMLGenerator
activate SVGGenerator
SVGGenerator --> FrontController
deactivate HTMLGenerator
deactivate SVGGenerator
FrontController --> BOMpage.jsp : command 'AngledBOM'
BOMpage.jsp -> FrontController : user clicks 'Godkend'
FrontController -> LogicFacade : LogicFacade.addOrderToDB()
LogicFacade -> DBFacade : addOrderToDB()
DBFacade -> Database : addOrderToDB()


@enduml